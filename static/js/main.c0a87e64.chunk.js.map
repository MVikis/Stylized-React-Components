{"version":3,"sources":["components/Stylized Cards/Card.js","components/Stylized Cards/CardApp.js","App.js","serviceWorker.js","index.js","components/Stylized Cards/greyShoe.png","components/Stylized Cards/yellowShoe.png","components/Stylized Cards/blueShoe.png"],"names":["Card","props","useState","imgs","src","setSrc","usePalette","data","loading","error","SetPallete","img","darkVibrant","className","style","background","vibrant","name","onClick","fontWeight","CardApp","greyShoe","yellowShoe","blueShoe","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","module","exports"],"mappings":"4NAMe,SAASA,EAAKC,GAAO,IAAD,EAGTC,mBAASD,EAAME,KAAK,IAHX,mBAGxBC,EAHwB,KAGnBC,EAHmB,OAMEC,qBAAWF,GAApCG,EANuB,EAMvBA,KANuB,EAMjBC,QANiB,EAMRC,MAInB,SAASC,EAAWC,GAAK,IAAD,EACaL,qBAAWK,GAApCJ,EADY,EACZA,KADY,EACNC,QADM,EACGC,MACvB,OAAOF,EAAKK,YAIpB,OAEI,yBAAKC,UAAU,QACP,yBAAKT,IAAKA,IACV,yBAAKS,UAAU,gBACX,yBAAKA,UAAU,SAASC,MAAO,CAACC,WAAWR,EAAKS,WAChD,yBAAKH,UAAU,kBACX,4BACKZ,EAAMgB,MAEX,yBAAKJ,UAAU,cACf,sCAIH,0BAAMK,QAAS,kBAAIb,EAAOJ,EAAME,KAAK,KAAKW,MAAO,CAACC,WAAW,GAAD,OAAIL,EAAWT,EAAME,KAAK,QACtF,0BAAMe,QAAS,kBAAIb,EAAOJ,EAAME,KAAK,KAAKW,MAAO,CAACC,WAAW,GAAD,OAAIL,EAAWT,EAAME,KAAK,QACtF,0BAAMe,QAAS,kBAAIb,EAAOJ,EAAME,KAAK,KAAKW,MAAO,CAACC,WAAW,GAAD,OAAIL,EAAWT,EAAME,KAAK,SAEnF,yBAAKU,UAAU,cAAcC,MAAO,CAACC,WAAWR,EAAKS,QAASG,WAAW,QAAzE,U,8DCjCT,SAASC,IAExB,IAAMjB,EAAO,CAACkB,IAASC,IAAWC,KAFD,EAGVrB,mBAAS,SAHC,mBAG3Be,EAH2B,UAI7B,OACI,kBAACjB,EAAD,CAAMiB,KAAMA,EAAMd,KAAMA,ICCjBqB,MAVf,WACE,OACE,yBAAKX,UAAU,OACb,4BAAQA,UAAU,cAClB,kBAACO,EAAD,SCIcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAMkC,a,mBEzI5BC,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,sC","file":"static/js/main.c0a87e64.chunk.js","sourcesContent":["import React, {  useState } from 'react'\r\n\r\nimport  {usePalette} from 'react-palette'\r\n\r\n\r\n\r\nexport default function Card(props){\r\n\r\n\r\n    const [src, setSrc] = useState(props.imgs[0])\r\n\r\n    \r\n    const { data, loading, error } = usePalette(src)\r\n    \r\n    \r\n \r\n        function SetPallete(img){\r\n            const { data, loading, error } = usePalette(img)\r\n            return data.darkVibrant\r\n        }\r\n   \r\n\r\n    return(\r\n\r\n        <div className=\"card\">\r\n                <img src={src} />\r\n                <div className=\"card-overlay\">\r\n                    <div className=\"circle\" style={{background:data.vibrant}}></div>\r\n                    <div className=\"card-container\">\r\n                        <h2>\r\n                            {props.name}\r\n                        </h2>\r\n                        <div className=\"color-flex\">\r\n                        <h4>\r\n                            Color:\r\n                            </h4>\r\n                           \r\n                     <span onClick={()=>setSrc(props.imgs[0])} style={{background:`${SetPallete(props.imgs[0])}`}}/>\r\n                     <span onClick={()=>setSrc(props.imgs[1])} style={{background:`${SetPallete(props.imgs[1])}`}}/>\r\n                     <span onClick={()=>setSrc(props.imgs[2])} style={{background:`${SetPallete(props.imgs[2])}`}}/>\r\n                        </div>\r\n                        <div className=\"card-button\" style={{background:data.vibrant, fontWeight:'400'}} >Buy</div>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport Card from './Card'\r\nimport './Card-style.css'\r\nimport greyShoe from './greyShoe.png'\r\nimport yellowShoe from './yellowShoe.png'\r\nimport blueShoe from './blueShoe.png'\r\n\r\n\r\nexport default function CardApp(){\r\n \r\nconst imgs = [greyShoe,yellowShoe,blueShoe]\r\nconst[name, setName] = useState(\"Shoes\")\r\n    return(\r\n        <Card name={name} imgs={imgs}/>\r\n       \r\n    )\r\n}","import React from 'react';\nimport './App.css';\nimport CardApp from './components/Stylized Cards/CardApp'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <CardApp/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/greyShoe.a75b7f37.png\";","module.exports = __webpack_public_path__ + \"static/media/yellowShoe.c03aaef8.png\";","module.exports = __webpack_public_path__ + \"static/media/blueShoe.602045c1.png\";"],"sourceRoot":""}